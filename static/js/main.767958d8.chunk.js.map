{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","components/actions.js","components/constants.js","registerServiceWorker.js","components/reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.767958d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../containers/App.css\"\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport\tdefault Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardList = ({ robots }) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\trobots.map((user, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../components/actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n//Learning with redux\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\n\r\nclass App extends Component {\r\n\t//$$removed since redux uses this now$$\r\n\t// constructor() {\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots: [],\r\n\t// \t\t// searchField: '' \r\n\t// \t}\r\n\t// }\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// \t.then(response=>  response.json())\r\n\t\t// \t.then(users => this.setState({ robots: users}))\r\n\t}\r\n\r\n\t// $$removed since redux uses this now$$\r\n\t// onSearchChange = (event) =>{\r\n\t// \tthis.setState({ searchField: event.target.value })\r\n\t// }\r\n\r\n\trender(){\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1>Loading</h1> : //if there are no robots\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>  response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n\r\n//need three since it is dealing with a promise\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED \r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload });\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './components/reducers.js';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); //done in order from thunk then logger\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n\t, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}